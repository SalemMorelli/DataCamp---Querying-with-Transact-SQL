~~~~~~~~~~~~~~~~~~~~~~Question 1

Use CHOOSE() and MONTH() to get the season in which each order was shipped from the Orders table. You should select the
order ID, shipped date, and then the season aliased as ShippedSeason. You can copy and paste the below into your query.

'Winter', 'Winter', 'Spring', 'Spring', 'Spring', 'Summer', 'Summer', 'Summer', 'Autumn', 'Autumn', 'Autumn', 'Winter'

Be careful to filter out any NULL shipped dates.

select OrderID, ShippedDate, CHOOSE(MONTH(ShippedDate), 'Winter', 'Winter', 'Spring', 'Spring', 'Spring', 'Summer', 
'Summer', 'Summer', 'Autumn', 'Autumn', 'Autumn', 'Winter') as ShippedSeason
from Orders
where ShippedDate IS NOT NULL;


~~~~~~~~~~~~~~~~~~~~~~~Question 2

Using the Suppliers table, select the company name and use a simple IIF expression to display 'outdated' if a company 
has a fax number, or 'modern' if it doesn't. Alias the result of the IIF expression to Status.


select CompanyName,
  IIF (Fax is null, 'modern', 'outdated') AS Status
from Suppliers;

~~~~~~~~~~~~~~~~~~~~~~~Question 3

Select from the Customers, Orders, and Order Details tables. Note that you need to use [Order Details] since the table 
name contains whitespace.

Use GROUP BY and ROLLUP() to get the total quantity ordered by all countries, while maintaining the total per country 
in your result set.

Your first column should be the country, and the second column the total quantity ordered by that country, aliased as TotalQuantity.

SELECT c.Country, SUM(od.Quantity) AS TotalQuantity
FROM Customers AS c
JOIN Orders AS o
ON c.CustomerID = o.CustomerID
JOIN [Order Details] AS od
ON o.OrderID = od.OrderID
GROUP BY c.Country WITH ROLLUP;

~~~~~~~~~~~~~~~~~~~~~~Question 4

From the Customers table, use GROUP BY to select the country, contact title, and count of that contact title aliased as Count, 
grouped by country and contact title (in that order).

Then use CASE WHEN, GROUPING_ID(), and ROLLUP() to add a column called Legend, which shows one of two things:

When the GROUPING_ID is 0, show '' (i.e., nothing)
When the GROUPING_ID is 1, show Subtotal for << Country >>'

--when ContactTitle is NULL the groupin_ID is always 1 and 0 in any other case. The GROUP BY AND ROLLUP aspects of this query 
are the most important because they ensure you add up the number of representatives for a particular country; so they must go together
Select Country, ContactTitle, Count(ContactTitle) as Count,
   Case 
       when GROUPING_ID(ContactTitle) = 0 THEN ''
       when GROUPING_ID(ContactTitle) = 1 THEN 'Subtotal for ' +Country
       END AS Legend
--GROUPING_ID(ContactTitle) as Grouping_ID
FROM Customers
GROUP BY ROLLUP (Country, ContactTitle);

~~~~~~~~~~~~~~~~~~~~~~~~~Question 5

Convert the following query to be pivoted, using PIVOT().

SELECT CategoryID, AVG(UnitPrice)
FROM Products
GROUP BY CategoryID;
Your result set should look like this:

Per Category	1	2	3	4	5	6	7	8
Average Unit Price	37.98	23.06	25.16	28.73	20.25	54.01	32.37	20.68





~~~~~~~~~~~~~~~~~~~~~~~~~~Question 6

Insert into the Region table the region ID 5 and the description 'Space'.

Then, in a second query, select the newly inserted data from the table using a WHERE clause.

Note: When you execute a query and the result is fetched, the database will be rolled back to its initial state. 
This means that you can click "Run Code" repeatedly, starting with a clean slate every time.
INSERT INTO Region (RegionID, RegionDescription)
VALUES
(5, 'Space');

-- Get last identity value that was inserted
--SELECT SCOPE_IDENTITY();

-- Finish the SELECT statement
Select * FROM Region 
WHERE RegionID = 5;

~~~~~~~~~~~~~~~~~~~~~~~~~~Question 7






